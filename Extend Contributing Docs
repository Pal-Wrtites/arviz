##Issue triaging
I think it would be great to have a short file (like issue reports one more or less) explaining (or providing references to documentation explaining)
1. How to subscribe to arviz issues, so they get notified of updates or new issues as well as how to unsubscribe manually from issues
2. Explain how occasional contributors can help with issues even without triaging permissions
3. (can't be done yet) link to governance/contributing section about how to join ArviZ's private communication channels (and also get triage permissions on github?) cc @canyon289

Regarding point 2, some ideas that come to mind are:

Make sure the issue contains a minimal working example if relevant. Sometimes, the issue doesn't contain such example but it is still clear about the problem and therefore, an example can be generated by someone other than the issue author. This will help whoever works on the fix by not requiring them to first reproduce the issue and then work on the fix as well as providing a test case.
Make sure the issue is clear and has references if needed. Sometimes an issue will not be completely clear, so issue triagers can comment asking clarifications or adding extra references so the issue is clear enough for someone else to start working on it without needing to first clarify the issue. examples: Ensure dimension order can be anything #1693 (whole discussion), Posterior plot errors with boolean array #1694 (comment),
Suggest fixes or workarounds. In some cases even, show that the issue has already been fixed on the development version but the fix is not yet released. examples: az.summary ignores the parameter coords #1732 (fixed in main but not on release), Using Arviz with Pymc3 and Tkinter #1692
(requires triage permissions) label issues
It could also be useful to link to https://ropensci.org/tags/labelathon/ or some of the references in there to show the importance of this task.

##Reviewing PRs
Similar to above, it should have instructions to subscribe to PRs to ArviZ repo, links to the contributing PRs file (but only to the checklist related sections) so reviewers are aware of what style and requirements PRs need to fulfill, links to a couple reference docs about how to give feedback. anyone has some ideas on that? it is not easy to review, give constructive and useful feedback and require changes if needed without being dismissive, making sure contributors now their effort and time is values...

